#!/usr/bin/env bash

# Load optional config
[ -f "$HOME/.config/dfzf/dfzf.conf" ] && source "$HOME/.config/dfzf/dfzf.conf"

# Define defaults if not already set
windows_app_id_map_json="${windows_app_id_map_json:-{\}}"
windows_glyph_rules_json="${windows_glyph_rules_json:-[]}"
windows_title_rm_pattern="${windows_title_rm_pattern:-— Mozilla Firefox }"

# Main
dfzf-exec -t get_tree --raw | jq -r \
  --argjson map "$windows_app_id_map_json" \
  --argjson glyph_rules "$windows_glyph_rules_json" '
    .. | objects
    | select(.type == "con")
    | select(.window_type == null or .window_type == "normal")
    | select(.name != null)
    | select((.app_id // .window_properties.class) != null)
    | select((.app_id // .window_properties.class) != "dfzf-popup")
    | . as $win
    | {
        id: .id,
        name: .name,
        sort: ([.marks[]? | select(startswith("_dfzf-sort"))] | first // "_dfzf-sort-0"),
        app_id: (
          (.app_id // .window_properties.class) as $app_id
          | ($map[$app_id] // $app_id)
        ),
        urgent: .urgent,
        important: ([.marks[]? | select(startswith("_dfzf-important"))] | first | length > 0),
        glyph: (
          ($glyph_rules
            | map(
                . as $rule |
                select(
                  ($rule.field == "app_id" and ($win.app_id // $win.window_properties.class // "" | test($rule.regex; "i"))) or
                  ($rule.field == "name"   and ($win.name // "" | test($rule.regex; "i")))
                )
              )
            | first
            | .glyph
          ) // " "
        )
      }
    | "\(.sort)" +
      (if .urgent then "\u001b[33m" elif .important then "\u001b[31m" else "" end) +
      "\(.glyph) [\(.app_id)]\t\(.name) #\(.id)" +
      (if .urgent or .important then "\u001b[0m" else "" end)
  ' | sort -nr \
    | sed -E 's/_dfzf-sort-[0-9]*//; s/'"$windows_title_rm_pattern"'//' \
    | awk 'NR == 1 {print "\033[38;2;76;120;153m" $0 "\033[0m"; next} {print}'

