#!/usr/bin/env bash
set -euo pipefail

windows_app_id_map_json="{}"
windows_glyph_rules_json='[{"glyph": " "}]'
windows_title_rm_pattern="— Mozilla Firefox "
[ -f "$HOME/.config/dfzf/dfzf.conf" ] && source "$HOME/.config/dfzf/dfzf.conf"

# Accept optional input via stdin or first argument
if [ -n "${1:-}" ]; then
	input_json="$1"
else
	input_json="$(dfzf-exec -t get_tree --raw)"
fi

RESET=$'\033[0m'
RED=$'\033[31m'
BLUE=$'\033[34m'
GREEN=$'\033[32m'
ORANGE=$'\033[38;5;208m'
# Main processing logic using jq
echo "$input_json" | jq -r --arg red "$RED" --arg blue "$BLUE" --arg green "$GREEN" --arg orange "$ORANGE" --arg reset "$RESET" \
	--argjson map "$windows_app_id_map_json" \
	--argjson glyph_rules "$windows_glyph_rules_json" '
  def format_title(text): "\u2063" + text + "\u2063";
    .. | objects
    | select(.type == "con" or .type == "floating_con")
    | select(.window_type == null or .window_type == "normal")
    | select(.name != null)
    | select((.app_id // .window_properties.class) != null)
    | select((.app_id // .window_properties.class) != "dfzf-popup")
    | . as $win
    | {
        id: .id,
        name: .name,
        sort: ([.marks[]? | select(startswith("_dfzf-sort"))] | first // "_dfzf-sort-0"),
        app_id: (
          (.app_id // .window_properties.class) as $app_id
          | ($map[$app_id] // $app_id)
        ),
        urgent: .urgent,
        red: (if any(.marks[]?; startswith("_dfzf-red-")) then "\($red) \($reset)" else "" end),
        blue: (if any(.marks[]?; startswith("_dfzf-blue-")) then "\($blue) \($reset)" else "" end),
        green: (if any(.marks[]?; startswith("_dfzf-green-")) then "\($green) \($reset)" else "" end),
        orange: (if any(.marks[]?; startswith("_dfzf-orange-")) then "\($orange) \($reset)" else "" end),
        glyph: (
          ($glyph_rules
            | map(
                . as $rule |
                select(
                  ($rule.field == "app_id" and ($win.app_id // $win.window_properties.class // "" | test($rule.regex; "i"))) or
                  ($rule.field == "name"   and ($win.name // "" | test($rule.regex; "i"))) or
                  ($rule.field == null) # default glyph
                )
              )
            | first
            | .glyph
          )
        )
      }
      
    | "\(.sort)\(if .urgent then "\u001b[33m" else "" end)\(.glyph) [\(.app_id)]\(if .urgent then "\u001b[0m" else "" end)\t\(.red)\(.blue)\(.green)\(.orange) \(format_title(.name)) #\(.id)"
  ' | sort -nr |
	sed -E 's/_dfzf-sort-[0-9]*//; s/'"$windows_title_rm_pattern"'//' |
	awk 'NR == 1 {
    # Remove existing ANSI escape codes from the first line
    gsub(/\033\[[0-9;]*m/, "");
    # Then apply the new color to the entire first line
    print "\033[38;2;76;120;153m" $0 "\033[0m";
    next
} 
{print}'
