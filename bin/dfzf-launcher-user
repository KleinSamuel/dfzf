#!/usr/bin/env bash
set -eo pipefail

export SHELL="$(command -v bash)"
dfzf-kill-bro >/dev/null
export FZF_DEFAULT_OPTS="--ansi --no-sort --exact --cycle --color=gutter:-1 --header= --info=inline-right --margin=1,2"
# terminal application launcher for sway, using fzf
# Modified version that only shows .local/share/applications/ entries
shopt -s nullglob globstar
set -o pipefail
if ! { exec 0>&3; } 1>/dev/null 2>&1; then
	exec 3>/dev/null # If file descriptor 3 is unused in parent shell, output to /dev/null
fi
# shellcheck disable=SC2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'
DEL=$'\34'

FZF_COMMAND="${FZF_COMMAND:=fzf}"
TERMINAL_COMMAND="${TERMINAL_COMMAND:="kitty -1 -e"}"
GLYPH_DESKTOP="${GLYPH_DESKTOP-  }"

if [[ ! -v PREVIEW_WINDOW ]]; then
	PREVIEW_WINDOW=up:2:noborder
fi

# Simplified provider setup - only desktop entries
declare -A PROVIDERS
PROVIDERS['desktop']="${0} list-entries${DEL}${0} describe-desktop \"{1}\"${DEL}${0} run-desktop '{1}' {2}${DEL}test -f '{1}' || exit 43"

HIST_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/${0##*/}-history.txt"

if [[ -n ${HIST_FILE} ]]; then
	mkdir -p "${HIST_FILE%/*}" && touch "$HIST_FILE"
	readarray HIST_LINES <"$HIST_FILE"
fi

function describe() {
	# shellcheck disable=SC2086
	readarray -d ${DEL} -t PROVIDER_ARGS <<<${PROVIDERS[${1}]}
	# shellcheck disable=SC2086
	[ -n "${PROVIDER_ARGS[1]}" ] && eval "${PROVIDER_ARGS[1]//\{1\}/${2}}"
}
function describe-desktop() {
	description=$(sed -ne '/^Comment=/{s/^Comment=//;p;q}' "$1")
	echo "$(sed -ne '/^Name=/{s/^Name=//;p;q}' "$1")"
	echo "${description:-No description}"
}

function provide() {
	# shellcheck disable=SC2086
	readarray -d ${DEL} -t PROVIDER_ARGS <<<${PROVIDERS[$1]}
	eval "${PROVIDER_ARGS[0]}"
}

function list-entries() {
	# Only look in .local/share/applications/
	local DIR="${HOME}/.local/share/applications"
	if [[ -d $DIR ]]; then
		# shellcheck disable=SC2068
		entries "$DIR"/**/*.desktop | sort -k2
	fi
}

function entries() {
	# shellcheck disable=SC2068
	awk -v pre="$GLYPH_DESKTOP" -F= '
    function desktopFileID(filename){
      sub("^.*applications/", "", filename);
      sub("/", "-", filename);
      return filename
    }
    BEGINFILE{
      application=0;
      hidden=0;
      block="";
      a=0

      id=desktopFileID(FILENAME)
      if(id in fileIds){
        nextfile;
      }else{
        fileIds[id]=0
      }
    }
    /^\[Desktop Entry\]/{block="entry"}
    /^Type=Application/{application=1}
    /^\[Desktop Action/{
      sub("^\\[Desktop Action ", "");
      sub("\\]$", "");
      block="action";
      a++;
      actions[a,"key"]=$0
    }
    /^\[X-/{
      sub("^\\[X-", "");
      sub("\\]$", "");
      block="action";
      a++;
      actions[a,"key"]=$0
    }
    /^Name=/{ (block=="action")? actions[a,"name"]=$2 : name=$2 }
    /^NoDisplay=true/{ (block=="action")? actions[a,"hidden"]=1 : hidden=1 }
    ENDFILE{
      if (application){
          if (!hidden)
              print FILENAME "\034desktop\034" pre name;
          if (a>0)
              for (i=1; i<=a; i++)
                  if (!actions[i, "hidden"])
                      print FILENAME "\034desktop\034" pre name " (" actions[i, "name"] ")\034" actions[i, "key"]
      }
    }' \
		$@ </dev/null
	# the empty stdin is needed in case no *.desktop files
}

function run-desktop() {
	CMD="$("${0}" generate-command "$@" 2>&3)"
	dfzf-exec -q "exec ${CMD}"
}

function generate-command() {
	# Define the search pattern that specifies the block to search for within the .desktop file
	PATTERN='^\\[Desktop Entry\\]'
	if [[ -n $2 ]]; then
		PATTERN="^\\\\[Desktop Action ${2}\\\\]"
	fi
	echo "Searching for pattern: ${PATTERN}" >&3
	# 1. We see a line starting [Desktop, but we're already searching: deactivate search again
	# 2. We see the specified pattern: start search
	# 3. We see an Exec= line during search: remove field codes and set variable
	# 3. We see a Path= line during search: set variable
	# 4. Finally, build command line
	awk -v pattern="${PATTERN}" -v terminal_cmd="${TERMINAL_COMMAND}" -F= '
    BEGIN{a=0;exec=0;path=0}
       /^\[Desktop/{
        if(a){ a=0 }
       }
      $0 ~ pattern{ a=1 }
      /^Terminal=/{
        sub("^Terminal=", "");
        if ($0 == "true") { terminal=1 }
      }
      /^Exec=/{
        if(a && !exec){
          sub("^Exec=", "");
          gsub(" ?%[cDdFfikmNnUuv]", "");
          exec=$0;
        }
      }
      /^Path=/{
        if(a && !path){ path=$2 }
       }
    END{
      if(path){ printf "cd " path " && " }
      printf "exec "
      if (terminal){ printf terminal_cmd " " }
      print exec
    }' "$1"
}

case "$1" in
describe | describe-desktop | entries | list-entries | generate-command | run-desktop | provide)
	"$@"
	exit
	;;
esac

FZFPIPE=$(mktemp -u)
mkfifo "$FZFPIPE"
trap 'rm "$FZFPIPE"' EXIT INT

# Append Launcher History, removing usage count
(printf '%s' "${HIST_LINES[@]#* }" >>"$FZFPIPE") &

# Only run the desktop provider
(bash -c "${0} provide desktop" >>"$FZFPIPE") &

readarray -t COMMAND_STR <<<"$(
	${FZF_COMMAND} --prompt="Launcher > " \
		--delimiter '\034' --nth ..3 --with-nth 3 \
		--print-query \
		--preview "$0 describe {2} {1}" \
		--preview-window="${PREVIEW_WINDOW}" \
		--no-multi \
		<"$FZFPIPE"
)" || exit 1

# Get the last line of the fzf output
COMMAND_STR=$(printf '%s\n' "${COMMAND_STR[@]: -1}")

[ -z "$COMMAND_STR" ] && exit 1

if [[ -n ${HIST_FILE} ]]; then
	# update history
	for i in "${!HIST_LINES[@]}"; do
		if [[ ${HIST_LINES[i]} == *" $COMMAND_STR"$'\n' ]]; then
			HIST_COUNT=${HIST_LINES[i]%% *}
			HIST_LINES[$i]="$((HIST_COUNT + 1)) $COMMAND_STR"$'\n'
			match=1
			break
		fi
	done
	if ! ((match)); then
		HIST_LINES+=("1 $COMMAND_STR"$'\n')
	fi

	printf '%s' "${HIST_LINES[@]}" | sort -nr >"$HIST_FILE"
fi

# shellcheck disable=SC2086
readarray -d $'\034' -t PARAMS <<<${COMMAND_STR}
# shellcheck disable=SC2086
readarray -d ${DEL} -t PROVIDER_ARGS <<<${PROVIDERS[${PARAMS[1]}]}
# Substitute {1}, {2} etc with the correct values
COMMAND=${PROVIDER_ARGS[2]//\{1\}/${PARAMS[0]}}
COMMAND=${COMMAND//\{2\}/${PARAMS[3]}}
COMMAND=${COMMAND%%[[:space:]]}

if [ -t 1 ]; then
	echo "Launching command: ${COMMAND}" >&3

	setsid /bin/sh -c "${COMMAND}" >&/dev/null </dev/null &
	sleep 0.01
else
	echo "${COMMAND}"
fi